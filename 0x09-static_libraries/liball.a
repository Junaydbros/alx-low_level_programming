!<arch>
0-isupper.c/    0           0     0     644     294       `
#include <stdio.h>
#include "main.h"

/**
 * _isupper - a function that checks for uppercase character
 * @c: the character to be checked
 *
 * Return: 1 if c is uppercase and 0 if otherwise.
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     329       `
#include <stdio.h>
#include "main.h"

/**
 * _memset - a function that fills memory with a constant byte
 * @s: memory area to be pointed to
 * @b: the constant byte to be filled in memory
 * @n: the number of bytes of the memory area pointed to by 's'
 *
 * Return: void
 */

char *_memset(char *s, char b, unsigned int n)
{

}

0-strcat.c/     0           0     0     644     672       `
#include <stdio.h>
#include "main.h"

/**
 * _strcat - a function that concatenates two strings
 * This function appends the 'src' string to the 'dest' string,
 * overwriting the terminating NULL byte at the end of 'dest'
 * Afterwards, a terminating NULL byte is then added
 * @dest: the destination string pointed to
 * @src: the source string to be appended to a destination string
 *
 * Return: a pointer to the resulting destination string
 */

char *_strcat(char *dest, char *src)
{
	int a, b, m;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
	}

	b = 0;
	while (src[b] != '\0')
	{
		b++;
	}

	for (m = 0; m <= b; m++)
	{
		dest[a + m] = src[m];
	}

	return (dest);
}
1-isdigit.c/    0           0     0     644     289       `
#include <stdio.h>
#include "main.h"

/**
 * _isdigit - a function that checks for a digit (0 through 9)
 * @c: the digit to be checked
 *
 * Return: 1 if c is a digit and 0 if otherwise
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     321       `
#include <stdio.h>
#include "main.h"

/**
 * _memcpy - a function that copies a memory area
 * @dest: the destination memory area
 * @src: the source memory area to be copied from
 * @n: the number of times the memory area would be copied
 *
 * Return: void
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{

}

1-strncat.c/    0           0     0     644     767       `
#include <stdio.h>
#include "main.h"

/**
 * _strncat - a function that concatenates two strings
 * This function appends the 'src' string to the 'dest' string,
 * plus, it will ue at most 'n' bytes from 'src'
 * The source string does not need to be null terminated if
 * It contains 'n' or more bytes
 * @dest: the destination string pointed to
 * @src: the source string to be appended to a destination string
 * @n: the number of bytes to be used
 *
 * Return: a pointer to the resulting destination string
 */

char *_strncat(char *dest, char *src, int n)
{
	int a, b, m;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
		continue;
	}

	b = 0;
	while (src[b] != '\0')
	{
		b++;
	}

	for (m = 0; m <= b && b < n; m++)
	{
		dest[a + m] = src[m];
	}

	return (dest);
}

100-atoi.c/     0           0     0     644     540       `
#include <stdio.h>
#include "main.h"

/**
 * _atoi - a function that converts a string to an integer
 * @s: the string to be converted to an integer
 * The number in the string can be preceded by an infinte number of characters
 * The positive (+) and (-) signs before the number should be taken to account
 * 'long' datatype, new variable of 'type' array and hard code special values
 * are not allowed in the program
 * If there are no numbers in the string, the function should return '0'
 *
 * Return: void
 */

int _atoi(char *s)
{

}
2-strchr.c/     0           0     0     644     427       `
#include <stdio.h>
#include "main.h"

/**
 * _strchr - a function that locates a character in a string
 * @s: the string to the checked for a specific character
 * @c: the character that would be picked from the string
 * The function returns a pointer to the first occurence of the character 'c'
 * in the string 's', or 'NULL' if the character is not found
 *
 * Return: that pointer
 */

char *_strchr(char *s, char c)
{

}

2-strlen.c/     0           0     0     644     270       `
#include <stdio.h>
#include "main.h"

/**
 * _strlen - a function that prints the length of a string
 * @s: the string's length to be returned
 *
 * Return: void
 */

int _strlen(char *s)
{
	int count = 0;

	while (*s != '\0')
	{
		count++;
		s++;
	}
	return (count);
}
2-strncpy.c/    0           0     0     644     295       `
#include <stdio.h>
#include "main.h"

/**
 * _strncpy - a function that copies a string
 * @dest: the destination string
 * @src: the source string to be copied from
 * @n: the number of times the string should be copied
 *
 * Return: void
 */

char *_strncpy(char *dest, char *src, int n)
{

}

3-islower.c/    0           0     0     644     298       `
#include <stdio.h>
#include "main.h"

/**
 * _islower - function that checks for lowercase character
 * @c: the character whose lower is to be checked
 *
 * Return: 1 if lowercase, 0 if otherwise
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     293       `
#include <stdio.h>
#include "main.h"

/**
 * _puts - a function that prints a string followed by a new line
 * @str: the string to be printed
 *
 * Return: void
 */

void _puts(char *str)
{
	int count = 0;

	while (*str != '\0')
	{
		_putchar(*str);
		count++;
		str++;
	}

	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     234       `
#include <stdio.h>
#include "main.h"

/**
 * _strcmp - a function that compares two strings
 * @s1: the first string to be compared
 * @s2: the second string to be compared
 *
 * Return: void
 */

int _strcmp(char *s1, char *s2)
{

}
3-strspn.c/     0           0     0     644     352       `
#include <stdio.h>
#include "main.h"

/**
 * _strspn - a function that gets the length of a prefix substring
 * @s: the initial segment of the substring which consists of bytes from accept
 * @accept: this is a substring whose bytes is put into 's'
 *
 * Return: the number of bytes in segment 's'
 */

unsigned int _strspn(char *s, char *accept)
{

}
4-isalpha.c/    0           0     0     644     351       `
#include <stdio.h>
#include "main.h"

/**
 * _isalpha - a function that checks for alphabetic character, upper or lower
 * @c: the character to be checked
 *
 * Return: 1 if the character is a letter and 0 if otherwise.
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}

}

4-strpbrk.c/    0           0     0     644     565       `
#include <stdio.h>
#include "main.h"

/**
 * _strpbrk - a function that searches a string for any of a set of bytes
 * @s: string that the function would locate the first occurrence in the string
 * @accept: this contains any of a set of bytes
 * This function locates the first occurrence in the string 's' of any of
 * the bytes in 'accept'
 * This function returns a pointer to the byte in 's' that matches one of
 * the bytes in 'accept', or 'NULL' if no such byte is found
 *
 * Return: that pointer to the byte
 */

char *_strpbrk(char *s, char *accept)
{

}

5-strstr.c/     0           0     0     644     567       `
#include <stdio.h>
#include "main.h"

/**
 * _strstr - a function that locates a substring
 * @haystack: the string that would be ransacked to locate a specific substring
 * @needle: the substring whose first occurrence is to be located from a string
 * The terminating NULL bytes are not compared
 * The function returns a pointer to the beginning of the located substring
 * 'NULL' would be returned should in case the substring is not found
 *
 * Return: that pointer to the beginning of the located substring
 */

char *_strstr(char *haystack, char *needle)
{

}

6-abs.c/        0           0     0     644     267       `
#include <stdio.h>
#include "main.h"

/**
 * _abs - a function that computes the absolute value of an integer.
 * @a: the integer whose absolute value is to be computed
 *
 * Return: void
 */

int _abs(int a)
{
	if (a >= 0)
	{
		return (a);
	}
	else
		return (-a);
}

9-strcpy.c/     0           0     0     644     476       `
#include <stdio.h>
#include "main.h"

/**
 * _strcpy - a function that copies the string pointed to by 'src'
 * This includes the terminating NULL byte, to the buffer pointed to by 'dest'
 * @dest: the string pointed to by the buffer
 * @src: the string pointed to that's to be copied
 *
 * Return: the pointer to 'dest'
 */

char *_strcpy(char *dest, char *src)
{
	int a;

	a = 0;
	while (src[a] != '\0')
	{
		dest[a] = src[a];
		a++;
	}

	dest[a] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     197       `
#include <unistd.h>

/**
 * _putchar - a function that writes a character c to stdout
 * @c: the character to be printed
 *
 * Return: void
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}

